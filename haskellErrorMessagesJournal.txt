Variable not in scope: divide :: [t0] -> t
	Trying to use something that isn't there.
* Couldn't match expected type `Bool'
                  with actual type `([t0], [t1])'
	Trying to match inncompatible types.
* Ambiguous type variable `t0' arising from a use of `=='
      prevents the constraint `(Eq t0)' from being solved.
	The type checker is confused.
error: parse error on input `->'
	Bad syntax.
error: Not in scope: type constructor or class `-'
	Using something that is not there.
error:
    Illegal operator `-' in type `[a] - > ([a], [a])'
      Use TypeOperators to allow operators in types
	Using something wrong.
error:
    Operator applied to too few arguments: [a] - > ([a], [a])
	Using something wrong.
* No instance for (Eq a) arising from an operator section
	Types not matching.
error:
    * Couldn't match expected type `a' with actual type `[a]'
	Doing something with inncompatable types.
error:
    * Occurs check: cannot construct the infinite type: a1 ~ [a1]
	Not defining a recursive function right.
error: Parse error in pattern: divide'
	Bad syntax.
error:
    Pattern syntax in expression context: ~hasInvalidCharacters
	Having something in the wrong place.
error:
    * Non type-variable argument in the constraint: Num ([a1], [a1])
	The type checker is confused.
error:
    * No instance for (Num ([a1], [a1])) arising from a use of `+'
	Types not matching.
error:
    * Expecting one more argument to `Num'
      Expected a type, but `Num' has kind `* -> Constraint'
	Not defining the type signature properly.
error:
    * Data constructor not in scope: Sum :: [a] -> a
	Trying to use something that you don't have access to.
error:
    * Could not deduce (Eq a) arising from a use of `=='
      from the context: Num a
	The type checker is confused.
error:
    Illegal binding of built-in syntax: (,,)
	Bad syntax.
error:
    Cannot parse data constructor in a data/newtype declaration: (Int Int Int Int Int Int Int Int Int)
	Not defining a data/newtype properly.
error:
    * No instance for (Num
                         (t0 -> t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> Position))
        arising from the literal `0'
	Types not matching.
error:
    * Ambiguous type variable `t0' arising from the literal `1'
      prevents the constraint `(Num t0)' from being solved.
	The type checker is confused.
error: Not a data constructor: `a'
	Trying to define things impropperly.
parse error (possibly incorrect indentation or mismatched brackets)
	Bad syntax.
error: Empty 'do' block
	Having a do block with nothing.
error:
    * The constructor `A' should have 1 argument, but has been given none
	Not using a datatype properly.
error: unterminated `{-'
	Not having matching block comments.
error:
    * Expecting one fewer arguments to `(Char, Char, Char)'
      Expected kind `* -> *', but `(Char, Char, Char)' has kind `*'
	Not defining a type properly.
error:
    lexical error in string/character literal at character '\n'
	Having a newline where it looks like there shouldn't be one.
error:
    Illegal tuple section: use TupleSections
	Not formatting a tuple properly.
error:
    The last statement in a 'do' block must be an expression
	Not having the last statement in a do block be an expression.
error:
    The type signature for `ack' lacks an accompanying binding
	Not defining a function, but only its type signature.
error:
    * Illegal qualified type:
        Integral b => b -> Integral c => c -> Integer
	Not defining a type properly.
error: Not in scope: data constructor `SM340'
	Using a data constructor where it shouldn't be used.
error:
    * Illegal type signature in instance declaration:
        (>>=) :: SM340 s a -> (a -> SM340 s b) -> SM340 s b
      (Use InstanceSigs to allow this)
	Not declaring a type signature right for the matching function.
error:
    * Found hole: _ :: s
	Using _ where it shouldn't be used.
error:
    Illegal view pattern:  _ -> (r, _)
    Use ViewPatterns to enable view patterns
	Not using a pattern properly.
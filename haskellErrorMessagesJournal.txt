Variable not in scope: divide :: [t0] -> t
	Trying to use something that isn't there.
* Couldn't match expected type `Bool'
                  with actual type `([t0], [t1])'
	Trying to match inncompatible types.
* Ambiguous type variable `t0' arising from a use of `=='
      prevents the constraint `(Eq t0)' from being solved.
      Probable fix: use a type annotation to specify what `t0' should be.
      These potential instances exist:
        instance Eq Ordering -- Defined in `GHC.Classes'
        instance Eq Integer
          -- Defined in `integer-gmp-1.0.0.1:GHC.Integer.Type'
        instance Eq a => Eq (Maybe a) -- Defined in `GHC.Base'
        ...plus 22 others
        ...plus 8 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
	The type checker is confused.
error: parse error on input `->'
	Bad syntax.
error: Not in scope: type constructor or class `-'
	Using something that is not there.
error:
    Illegal operator `-' in type `[a] - > ([a], [a])'
      Use TypeOperators to allow operators in types
	Using something wrong.
error:
    Operator applied to too few arguments: [a] - > ([a], [a])
	Using something wrong.
* No instance for (Eq a) arising from an operator section
	Types not matching.
error:
    * Couldn't match expected type `a' with actual type `[a]'
	Doing something with inncompatable types.
error:
    * Occurs check: cannot construct the infinite type: a1 ~ [a1]
	Not defining a recursive function right.
error: Parse error in pattern: divide'
	Bad syntax.
error:
    Pattern syntax in expression context: ~hasInvalidCharacters
	Having something in the wrong place.
error:
    * Non type-variable argument in the constraint: Num ([a1], [a1])
	The type checker is confused.
error:
    * No instance for (Num ([a1], [a1])) arising from a use of `+'
	Types not matching.
error:
    * Expecting one more argument to `Num'
      Expected a type, but `Num' has kind `* -> Constraint'
	Not defining the type signature properly.
error:
    * Data constructor not in scope: Sum :: [a] -> a
	Trying to use something that you don't have access to.